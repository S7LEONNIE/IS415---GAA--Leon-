---
title: "In-Class Exercise 9: Geographically Weighted Random Forest (GwRF) "
date: "13 March 2023"
date-modified: "`r Sys.Date()`"
format: html
execute:
  eval: true
  echo: true
  message: false
  warning: false
editor: visual
---

# Installing Modules

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tidyverse, tmap, ggpubr, olsrr, devtools, rsample)
```

<!--# rsample is part of tidymodels package -->

# Preparing Data

## Aspatial Data

```{r}
mdata <- read_rds("data/aspatial/mdata.rds")
```

## Data Sampling

```{r}
set.seed(1234)
resale_split <- initial_split(mdata,
                              prop = 6.5/10,) 

train_data <- training(resale_split)
test_data <- testing(resale_split)
```

```{r}
#| eval: false
write_rds(train_data, "data/model/train_data.rds")
write_rds(test_data, "data/model/test_data.rds")
```

## Building a Non-Spatial Multiple Linear Regression

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data = train_data)
summary(price_mlr)
```

```{r}
write_rds(price_mlr, "data/model/price_mlr.rds")
```

# GWR Predictive Method

## Converting the sf data.frame to SpatialPointDataFrame

```{r}
train_data_sp <- as_Spatial(train_data)
train_data_sp
```

## Computing Adaptive Bandwidth

```{r}

```

# Preparing Coordinate Data

## Extracting Coordinate Data

```{r}
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

```{r}
coords_train <- write_rds(coords_train, "data/model/coords_train.rds")
coords_test <- write_rds(coords_test, "data/model/coords_test.rds")
```

## Dropping Geometry Field

```{r}
train_data <- train_data %>%
  st_drop_geometry()
```

# Calibrating Random Forest

```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data = train_data)
```

```{r}
print(rf)
```

<!--# Ranger shows MSE without Square Rooting, need to manually do it -->

# Calibrating Geographically Weighted Random Forest

```{r}
set.seed(1234)
gwRF_adaptive <- grf(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                dframe = train_data,
                bw = 55,
                kernel = "adaptive",
                coords = coords_train)
```

```{r}
write_rds(gwRF_adaptive, "data/model/gwRF_adaptive.rds")
```

```{r}
vi_df <- as.data.frame(gwRF_adaptive$Global.Model$variable.importance)
```

# Predicting by Using Test Data

## Preparing The Test Data

```{r}
test_data <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```

## Predicting with Test Data

```{#|Eval: false}
{r}
gwRF_pred <- predict.grf(gwRF_adaptive, 
                         test_data,
                         x.var.name = "X",
                         y.var.name = "Y",
                         local.w = 1,
                         global.w = 0)
```

## Converting the Predicting Output into a Data Frame

```{#|Eval: false}
{r}
gwRF_pred_df <- as.data.frame(gwRF_pred)
```

```{#|Eval: false}
{r}
gwRF_test_predict <- cbind(test_data, predict_grf_df)
```
